const express = require("express");
const cors = require('cors');
require('dotenv').config();
const app = express();
const PORT = process.env.PORT;
const db = require("./models");
const bodyParser = require("body-parser");
const cookieParser = require("cookie-parser");
const session = require('express-session');
const passport = require('passport');
const OAuth2Strategy = require('passport-google-oauth2').Strategy;

const authRouter = require('./router/auth-router/auth-router');
const contactRouter = require("./router/contact-router/contact-router");
const productRouter = require("./router/product-router/product-router");
const orderRouter = require("./router/order-router/order-router");

const paymentRouter = require("./router/payment-router/payment-router");
const globalErrorHandler = require("./controllers/globalErrorHandler/globalErrorHandler");
const catchAsync = require("./utils/catchAsync");
const AppError = require("./utils/appError");
const { User } = require("./models");
const jwt = require('jsonwebtoken');

app.use(express.json()); //middleware
app.use(cookieParser());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());

app.use(cors({
  origin: 'http://localhost:5173',
  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
  credentials: true,
  optionsSuccessStatus: 204,
}));

//setup session
app.use(session({
  secret: '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',
  resave: false,
  saveUninitialized: true
}));

//setup passport
app.use(passport.initialize());
app.use(passport.session());

passport.use(
  new OAuth2Strategy({
    clientID: "206705606502-d2duo4rhqajkv1dokea3fflr72tti8ej.apps.googleusercontent.com",
    clientSecret: "",
    callbackURL: '/auth/google/callback',
    scope: ['profile', 'email'],
    verify: ""
  },
    async (res, accessToken, refreshToken, profile, done) => {
      // console.log("profile", profile);
      try {
        let user = await User.findOne({ where: { email: profile.emails[0].value } });

        if (!user) {
          user = await User.create({
            username: profile.displayName,
            email: profile.emails[0].value,
            password: "",
            mobilenumber: "",
            avatar: { public_id: "this is sample id", url: profile.photos[0].value },
            role: 'user'
          });

        }

        return done(null, user);
      }
      catch (error) {
        return done(error, null)
      }
    }),
)

passport.serializeUser((user, done) => {
  done(null, user);
})

passport.deserializeUser((user, done) => {
  done(null, user);
})

//initial google auth login
app.get('/auth/google', passport.authenticate("google", {
  scope: ['profile', 'email']
}))

// app.get('/auth/google/callback', passport.authenticate('google',
//   {
//     successRedirect: "http://localhost:5173",
//     failureRedirect: "http://localhost:5173/login"
//   }
// ))

app.get('/auth/google/callback', passport.authenticate('google',
  { failureRedirect: 'http://localhost:5173/login' }),
  (req, res) => {
    // Generate a JWT token
    const token = jwt.sign({ email:req.user.email }, process.env.JWT_SECRET_KEY, { expiresIn: process.env.JWT_EXPIRE });

    //options for cookie
    const cookieExpire = new Date(Date.now() + (process.env.COOKIE_EXPIRE * 24 * 60 * 60 * 1000));
    const options = {
      expires: cookieExpire,
      httpOnly: process.env.HTTP_ONLY,  // better to keep this true for security reasons
      secure: process.env.COOKIE_SECURE,
      sameSite: 'lax', // Adjust if needed
      path: '/', // Adjust if needed
    };

    res.status(200).cookie("token", token, options).redirect("http://localhost:5173");;
  });

//rest api end point
app.use("/api/auth", authRouter);
app.use("/api/product", productRouter);
app.use("/api/order", orderRouter);
app.use("/api/payment", paymentRouter);


app.use('*',
  catchAsync(async (req, res, next) => {
    // provide custom error message generated by user
    throw new AppError(`Can't find ${req.originalUrl} on this server`, 404)

    // provide error message through global error handler by using catchAsync middleware way without using try catch block
    // throw new Error(`Can't find ${req.originalUrl} on this server`);

    // provide default error message  through global error handler for async function
    // return next(new Error(`Can't find ${req.originalUrl} on this server`))

    // provide error message through global error handler for normal function
    // throw new Error(`Can't find ${req.originalUrl} on this server`);

    // default way to provide error message 
    // res.status(404).json({
    //     status: 'fail',
    //     message: `Can't find ${req.originalUrl} on this server`
    // })
  }))

//global error handler
app.use(globalErrorHandler);

db.sequelize
  .sync({ force: false })
  .then(() => {
    app.listen(PORT, () => {
      console.log(`Server is running on port ${PORT}`);
      console.log("Database connected successfully");
    })
  })
  .catch((err) => {
    console.error("Error syncing database:", err);
  });
